vue 셋팅방법

1. 프로젝트 생성할 폴더 생성
2.해당폴더를 vsc 같은 에디터 프로그램으로 폴더 오픈하기
3.Node.js 다운로드 및 설치(가능하면 최신, 혹은 LTS버전)
4.VSC에서 터미널 오픈 후 npm install @vue/cli 입력, 설치
5.설치 완료되면 create vue 프로젝트명 입력, 설치
셀렉트 창이 나오면 vue3 선택
6.부트스트랩 설치/ 부트스트랩. vue 도 있으나 큰차이없다함
부트스트랩 사이트에 정확한 명령어있음. 현재는 npm install bootstrap
7.설치 후 main.js에 import 'bootstrap'
import 'bootstrap/dist/css/bootstrap.min.css' 코드 입력
8.라우터 설치.  npm install vue-router@4 입력
9.main.js에 라우터설정 코드 입력해도 되지만, 코드가 길어지기에 보통은 라우터.js파일을 따로만들어서
그곳에 라우터 설정 코딩을 한다.
기본 코딩은
import { createWebHistory, createRouter } from "vue-router";

const routes = [
  {
    path: "/경로",
    component: import해온 컴포넌트,
  }
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;
이다. 굳이 이해할거 없고, vue-router 만든사람이 정한 사용법코드이기에 복사붙여넣기 해라
main.js에도 라우터를 사용한다는 코드를 입력한다.
import router from './router'
createApp(App).use(router).mount('#app')
App.vue에 원하는 라우터 출력 부분에 <router-view></router-view>를 추가하면 끝.

클릭시 페이지링크 이동하기<router-link to="/list">이동하기</router-link>

url경로에 파라미터를 받아서 라우팅하기
const routes = [
  {
    path: '/detail/:id',
    component: Detail,
  },
];
라우터.js파일에 위에처럼 코드를 입력하고 이용할 컴퍼넌트 안에 코딩을 한다.
Detail.vue
<div>
        <h4>상세페이지</h4>
        <h5>{{Blogs[$route.params.id].title}}</h5>
        <p>{{Blogs[$route.params.id].content}}</p>
        <router-view></router-view>
    </div>

List.vue
//@click="$router.push('/detail/0')" 는 클릭시 ('')안에 있는 경로로 페이지를 이동시키는 기능
<div>
      <h5 @click="$router.push('/detail/0')">{{Blogs[0].title}}</h5>
      <p>{{Blogs[0].content}}</p>
      </div>
      <div>
----------------------------------------------------------------------------------------------------------

데이터 바인딩 기본문법
<script>
export default {
  name : 'App',
  data(){
    return {
      price1 : 60
    }
  }
}

</script>
----------------------------------------------------------------------------------------------------------
포문
<div class="menu">
  <a v-for="(작명,i) in 메뉴들" :key="i"> {{ 작명 }}</a>
</div>

이벤트핸들러
자바스크립트는 onclick="" 이라는 이벤트 핸들러를 HTML태그에 달았지만

Vue에서는 @click="" 이라고 사용합니다.

그럼 안에다가 자바스크립트를 자유롭게 입력가능합니다.



<div>
  <h4>{{products[0]}}</h4>
  <p>50만원</p>
  <button @click="신고수++">허위매물신고</button>
  <span>신고수 : {신고수}</span>
</div>

코드가 길 경우 함수를 만들어씁니다



긴 코드를 짧게 축약해주는게 바로 함수문법입니다.

그래서 @click 안에 들어갈 말이 너무 길다면 함수를 만들어서 집어넣으십시오.

함수 만드는 자리는 이미 정해져있습니다. 밑에서 methods : {} 라는 항목을 신설해주면 됩니다.


data(){
  return {
    신고수 : 0,
  },
  methods : {
    increase(){
      this.신고수 += 1
    }
  }
}
----------------------------------------------------------------------------------------------------------

모달창만들기
<div class="black-bg" v-if="모달창열렸니 == true">
  <div class="white-bg">
    <h4>상세페이지</h4>
    <p>상세페이지내용임</p>
  </div>
</div>
body {
  margin : 0;
}
div {
  box-sizing: border-box;
}
.black-bg {
  width: 100%; height:100%;
  background: rgba(0,0,0,0.5);
  position: fixed; padding: 20px;
}
.white-bg {
  width: 100%; background: white;
  border-radius: 8px;
  padding: 20px;
}

----------------------------------------------------------------------------------------------------------
컴포넌트 쓰는 법



원하는 곳에서 어쩌구.vue 파일을 1. import하고 2. 등록하고 3. 쓰면 됩니다.



import Discount from './Discount.vue 경로'

export default {
  data() {

  },
  components : {
    Discount,
  }
}
1. 아까 만들어둔 vue 파일을 import하고

2. 등록하는건 위와 같이 <script>안에 작성해주면 됩니다.

components 라는 항목이 이미 있으면 그거 쓰시고 없으면 하나 만드십시오.



3. 그럼 이제 <template> 안에서 자유롭게 가져다쓸 수 있습니다.

<Discount>
<Discount/>
이런 식으로 원하는 곳 아무데나 사용가능합니다.

----------------------------------------------------------------------------------------------------------

자식이 부모가 가진 데이터 쓰려면 props



부모 -> 자식 이렇게 props라는 문법으로 전송해주어야 사용가능합니다.

props 쓰려면 이것도 3-step이 있습니다.

1. 보내고 2. 등록하고 3. 쓰면 됩니다. 3번은 생략해도 에러는 안남





원룸들이라는 App.vue에 있는 데이터를 Modal.vue로 보내봅시다.



(App.vue)

<Modal :원룸들="원룸들" />
① 이렇게 데이터바인딩 문법쓰시면 데이터를 <Modal>로 보낼 수 있습니다.



<Modal :작명="하단의데이터이름" /> 이런 식으로 써주면 됩니다. 근데 귀찮아서 이름 두개 통일함

(그래서 콜론 : 이거 역할은 2개입니다. 데이터바인딩 혹은 props 전송임)







(Modal.vue)

<script>
  export default {
    name : 'Modal',
    props : {
      원룸들 : Array,
    }
  }
</script>
② 자식컴포넌트는 데이터를 받으면 props로 등록하십시오.

props : {} 열고 거기다가 아까 작명한 { 데이터이름 : 자료형 }

적어주면 됩니다.

자료형엔 Array, Object, String, Number 이런 것들을 적으면 됩니다.



③ props 등록한 것들은 HTML안에서 데이터바인딩으로 자유롭게 사용가능합니다.



그래서 원룸들, 누른거, 모달창열렸니 이런 데이터들을 App.vue에서 Modal.vue로 한번 보내보십시오.

잘 보냈으면 모달창이 동작할겁니다.

하지만 닫기버튼은 주석처리합시다. 아마 props 수정하지마세요~ 이런 에러가 뜰겁니다.

props는 그냥 받아서 사용만 하는 read-only 데이터처럼 취급하셔야지 수정하시면 안됩니다. 에러남









Q. 애초에 Modal.vue에다가 원룸들, 누른거 이런거 데이터 저장해두면 안되나?



props가 귀찮기 때문에

App.vue에다가 만들지말고 애초에 Modal.vue 파일에다가 data(){} 열고

여기에 데이터들 저장해놓고 쓰면 안되냐는 소리입니다.



내가 이 데이터를 Modal.vue 안에서만 쓸 거라고 자신하면 거기다가 만드셔도 됩니다.

하지만 데이터를 만들 때 원칙이 있는데

"데이터를 사용하는 컴포넌트들 중 최상위 컴포넌트에다가 데이터를 만들어놔야함"

이걸 지켜서 만들어주시길 바랍니다.

왜냐면 데이터는 위로 전송하는게 복잡하고 추적이 어렵기 때문입니다.

귀찮으면 그냥 모조리 App.vue에 저장해놓으셈 그것도 나쁘지 않습니다.


오늘의 교훈 :

컴포넌트로 많이 쪼개면 props 보내는거 귀찮으니까

만들기 전에 "만들면 이득이 있을까" 라는 생각을 해보고 만들도록 합시다.

----------------------------------------------------------------------------------------------------------

<button @click="모달창열렸니 = false">닫기버튼</button>
Modal.vue에 이렇게 코드짜면 되겠습니까

모달창열렸니는 Modal.vue가 아니라 App.vue에 있는 데이터라 안됩니다.

부모에 있는 데이터 수정하고 싶으면 커스텀이벤트로 메세지를 주면 됩니다.





<button @click="$emit('closeModal')">닫기버튼</button>
그래서 Modal.vue는 이렇게 메세지를 보냈고



<Modal @closeModal="모달창열렸니 = false">
App.vue는 수신하는 코드를 이렇게 작성했습니다.


----------------------------------------------------------------------------------------------------------
사용자가 <input>에 뭔가 입력하면 그걸 가지고 여러가지 UI 기능들을 만들어낼 수 있습니다.

쇼핑몰에서 흔히 쓰는 1. 상품 수량변경기능 2. 총금액계산기능을 만들어보며 배워봅시다.

그러기 위해선 <input>에 유저가 입력한 내용을 data(){} 안에 저장하는 법 부터 알아야합니다.

실은 다 배우긴 했는데 @input @onchange 이벤트 핸들러 쓰셔도 되고

혹은 더 짧아보이는 v-model 이런거 쓰시면 됩니다.











사용자가 입력한 정보를 data로 저장하려면



그래서 Modal.vue에다가 <input> 하나만 만들어보십시오.

여기다가 상품 수량을 입력하면 수량에 맞는 최종가격을 모달창에서 보여주고 싶은겁니다.

코드 어떻게 짜야합니까.



사용자가 입력한 정보에 따라서 이것저것 뭔가 실시간으로 바뀌고 싶으면

당연히 data로 저장해두시고 필요할 때 {{데이터바인딩}} 하셔야합니다.

그래서 사용자가 <input>에 입력한 값을 data로 저장하고 싶으면 코드 이렇게 짜면 됩니다.



(Modal.vue임)

<template>
  (생략)
  <input @input="month = $event.target.value">
</template>
<script>
export default {
  data(){
    return {
      month : 0
    }
  }
}
</script>




1. @input 이거는 @click 이거랑 똑같은겁니다. 근데 사용자가 input에 뭔가 입력할 때 동작하는 이벤트핸들러입니다. 유사품 @change 이런 것도 있습니다.



2. $event는 Vue가 제공하는 특별한 변수인데 event object라는걸 뜻합니다.

자바스크립트 이벤트리스너에서 addEventListener('click', function(e){}) 이런 문법을 쓰는데 여기서의 e랑 똑같은 의미입니다.

그래서 $event.target.value라고 작성하면 <input>에 입력한 값을 가져올 수 있습니다.



3. 그걸 밑에 month라는 data 항목에 저장하라고 써놨습니다.

그럼 이제 저기 <input>에 뭔가 입력할 때마다 month라는 곳에 사용자가 입력한 값이 저장됩니다.

끝

사용자가 입력한 정보를 data로 저장하려면 2



다른 방법도 있습니다. Vue는 뭔가 이런 자잘한 편의성 문법들이 많습니다.



<input @input="month = $event.target.value">
아까 이렇게 개발해 놓은걸



<input v-model="month">
이렇게 바꾸셔도 똑같이 동작합니다.

v-model은 "여기 입력된 값을 data로 바로 저장해주세요~" 라는 문법이기 때문입니다.

따옴표 안에 하단의 data 이름만 잘 적어주시면 됩니다.







(참고) <input> 태그말고도 <textarea> <select> 이런 것들에도 전부 적용가능합니다.

<input type="checkbox"> 등 타입을 다양하게 바꾸셔도 적용가능합니다.





(참고2) 사용자가 <input>에 적은건 무조건 문자입니다. 123이라고 적어도 '123' 이런 문자로 저장됩니다.

그래서 v-model.number="month" 이런 directive라는걸 사용하시면 숫자가 들어오면 숫자로 저장해줍니다.

하지만 숫자로 변환만 해주는 거지 'ㄱㄴㄷ' 문자입력은 막을 수 없습니다.


사용자가 <input>에 입력한 데이터는 무조건 문자입니다.

123 이렇게 입력해도 '123' 이렇게 됩니다.

이걸 강제로 숫자로 바꾸고 싶으면 v-model.number="데이터이름" 이것만 장착해주면

데이터로 저장될 때 숫자자료로 바꿔서 저장됩니다.



하지만 'abc' 문자를 인풋에 입력하는걸 막을 순 없습니다.

이걸 막고 싶으면 watcher를 써봅시다.

watch : {} 라는 항목을 신설해서 거기다가 작성해주시면 되며

어떤 데이터를 계속 감시하는 역할을 하는 코드를 적을 수 있습니다.

감시한다는게 어려운건 아니고

그냥 특정 데이터가 변경될 때마다 실행되는 코드를 여기 적을 수 있습니다.

그게 감시죠 뭐
export default {
  data(){
    return {
      month : 1
    }
  },
  watch : {
    month(a){
      if (a > 12) {
         alert('13이상 입력하지마')
      }
    }
  }
}





데이터를 감시하고 싶으면 watch



그래서 Modal.vue에 이렇게 작성해보십시오

export default {
  data(){
    return {
      month : 1
    }
  },
  watch : {
    month(){
      //month가 변경될 때 실행할 코드
    }
  }
}




watch 라는 항목에 감시자들을 만들 수 있습니다. 정해져있음

그리고 여기엔 함수를 집어넣을 수 있는데

함수명을 특이하게도 내가 감시하고 싶은 데이터명으로 작명하셔야합니다.

month() 이렇게 지으면 month 데이터 감시자가 되는 것임

그리고 그 함수안에 month가 변할 때마다 실행하고 싶은 코드를 적어주면 완성입니다.

참고로 month(a) 안에 파라미터 아무거나 작명해서 사용가능한데

그 파라미터는 month가 변경될 값을 의미합니다.

(두개까지 작명가능한데 첫째는 변경될 값, 둘째는 변경전 값을 의미합니다.)









Q. month 라는 데이터가 12보다 크게 변하면 경고문 띄우려면?



자바스크립트로 alert('안녕') 이렇게 쓰면 경고문을 띄울 수 있습니다.

----------------------------------------------------------------------------------------------------------
뷰 공식문서 살펴보다보면 Lifecycle 이라고 설명하는 이상한 부분이 있습니다.

대충 컴포넌트는 이런 step으로 생성되고 사라지고 업데이트 된다는 소리인데

이걸 왜 설명하고 있냐면 Lifecycle hook 이란걸 쓰기 위해서입니다.









1. 컴포넌트를 보여줄 때 create -> mount 이 단계로 생성됩니다.

create는 데이터생성, mount는 index.html 파일에 장착 이렇게 생각하시면 됩니다.

2. 데이터가 바뀌어서 컴포넌트가 재렌더링될 때는 update 단계를 거치며

3. 다른페이지로 이동하거나 그럴 때 컴포넌트가 삭제될 때는 unmount 라는 단계를 거칩니다.



이 단계들 중간중간에 코드를 실행시키고 싶을 때가 있습니다.

예를 들면 mount 되기 전에 뭔가 ajax 요청으로 서버에서 데이터를 가져오거나

update 되기 전에 뭔가 코드를 실행해서 데이터를 검증해보거나

이런 식입니다.

그럴 때 lifecycle hook을 골라서 쓰면 됩니다.







beforeCreate()
created()
beforeMount()
mounted()
beforeUpdate()
updated()
beforeUnmount()
unmounted()
대충 이렇게 있습니다. 함수명만 잘 읽어봐도 어떤 기능을 하는 함수인지 알 수 있겠군요.

예를 들어서 beforeUpdate() 이건 언제 쓰는 함수겠습니까.

컴포넌트가 update되기 전에 뭔가 실행시키고 싶을 때 쓰는 함수입니다.



예를 들어서 mounted() 이건 언제쓰는 함수겠습니까.

컴포넌트가 mount 되고 나서 뭔가 실행시키고 싶을 때 쓰는 함수입니다.





data(){
  return {

  }
},
mounted(){
  어쩌구~
}
대충 컴포넌트 파일 하단에 저런 식으로 쓰면 됩니다. 그럼 mount가 되고나서 어쩌구~라는 코드를 실행해줍니다.







특히 서버가 있으면 서버에서 데이터 가져오는 일이 잦은데

데이터가져오는 코드를 mounted() 아니면 created() 여기에 보통 작성합니다.


일단 App.vue에 할인해주는 문구를 <p>태그로 하나 만들어보겠습니다.

원래는 <Discount>가 있지만 약간 이해를 돕기 위해서 새로 만들겁니다.



그 안에 30% 이런 수치가 있으면 데이터로 만들어서 {{박아넣습니다}}

왜 데이터로 만들어서 {{데이터바인딩}} 하냐고요? 자주변하는 데이터는 그렇게 하라고 배웠던 기억이 납니다.

그래서 역시 문법만 외우면 되는게 아니라 이 문법을 언제 왜 쓰는지를 함께 배워야합니다.



(App.vue)
<p>지금 결제하면 {{amount}}% 할인</p>

(App.vue 하단 데이터만드는 곳)
data(){
 return {
    amount : 30,
  }
}

그럼 이제 페이지 로드시 저 30이라는 숫자를 1초마다 1씩 감소시켜야합니다.

그건 setInterval() 이라는 자바스크립트 내장 함수 이용하면 된다고 했습니다.

그리고 페이지 로드시 실행해야하니까 mounted()안에 넣으면 되겠군요.



(App.vue 하단)

mounted(){
  setInterval(()=>{
      this.amount--;
  }, 1000);
}
이러면 끝입니다.

모달창 내에 input이 있는데 여기에 2를 기입했을 때 알림창 alert() 을 띄우려면?

물론 watcher를 쓰면 되는데 이거 말고 오늘 배운 lifecycle hook을 이용합시다.

힌트는 데이터가 변경되면 HTML (컴포넌트)가 재렌더링되는데 이걸 라이프사이클 용어로 update라고 합니다.

지금 모달창 내의 <input>에 뭔가 입력하면 HTML이 자동으로 재렌더링 됩니다.

이걸 라이프사이클 용어로 표현하면 <Modal> 컴포넌트가 update 되는겁니다.

일부분만 바뀌는 것 같지만 <Modal>이 전부 재렌더링 된다고 보시면 됩니다. 원래 그럼





그래서 update 되기 전에 뭔가 실행하고 싶어서

Modal.vue 안에다가 라이프사이클 훅을 걸어볼겁니다.



beforeUpdate(){
    if (this.month == 2){
      alert('2개월은 너무 적음.. 안팝니다')
    }
 }
▲ 업데이트 되기 전에 month라는 데이터를 검사하는겁니다.

그리고 그 데이터가 2면 뭔가 원하는 동작을 실행시켜주는 코드입니다.



----------------------------------------------------------------------------------------------------------

 5 분
라우터 나머지 기능들 (hash mode, guards)




1. Hash mode vs HTML5 mode



우리가 맨 처음 셋팅해놨던 코드는 이렇습니다.



import { createRouter, createWebHistory } from 'vue-router'

const router = [];
const router = createRouter({
  history: createWebHistory(),
  routes,
})


history : createWebHistory() 이런 설정을 추가해놨는데

이게 문제가 되는 경우 다르게 설정해놓을 수 있습니다.









import { createRouter, createWebHashHistory } from 'vue-router'

const router = [];
const router = createRouter({
  history: createWebHashHistory(),
  routes,
})


history: createWebHashHistory()

이렇게 설정해놓는건데 이걸 Hash mode라고 합니다.

이걸 선택하시면 URL에 전부 #이 붙은 채로 시작합니다.

codingapple.com/#/detail 이런 식입니다







- HTML5 mode를 선택한 경우

누군가 /detail 이라고 URL란에 입력하면 실은 이건

Vue router로 /detail을 보여주세요~가 아니라

서버에 /detail 페이지를 요청해주세요~ 라는 뜻입니다.

그래서 Vue가 라우팅을 해주기 전에 서버가 /detail 페이지를 보여주려고 할 수도 있습니다.

근데 서버에 아무 기능을 개발안해놨으니 404페이지가 뜨거나 그럴 수 있습니다.

그래서 이걸 방지하려면 서버에다가 "어떤 사람이 /어쩌구로 접속하면 그냥 Vue에게 라우팅 맡겨주세요~" 라고 미리 기능개발이 필요합니다.





- Hash mode를 선택한 경우

hash mode의 장점은 일단 URL에 #이 붙은 채로 시작합니다.

codingapple.com/#/ 이게 메인페이지입니다.

왜 # 이걸 붙이냐면 URL에서 # 뒤에 있는 내용들은 절대 서버로 전달되지 않아서 그렇습니다.



그래서 서버가 라우팅을 채가는 일을 방지할 수 있고

Vue router에게 온전히 라우팅을 맡길 수 있는 것입니다.

그래서 님들이 서버가 없으면 # 붙는 hash 라우터로 사이트를 만드는 것도 좋은 선택입니다.











2. Navigation guards



특정 URL로 접속할 때 뭔가 코드를 실행하고 싶은 경우가 있습니다.

예를 들어서 마이페이지를 만들었는데 이걸 로그인한 사람만 보여주고 싶은 경우

라우팅해주기 전에 "니 로그인했냐" 이런 코드를 실행해야합니다.

그럴때 navigation guard를 쓰면 됩니다.

이것은 네비게이션해주기 전에 실행할 수 있는 코드, 그니까 hook 같은 거라고 보면 되겠습니다.









예를 들면 /hello 라는 경로로 들어가기 전에 뭔가 검사를 해주고 싶으면 beforeEnter 라는 항목을 만들어주면 됩니다.

그리고 거긴 함수를 적어주면 됩니다.

그 함수는 경우에 따라서 다른 route를 퉤 뱉는 함수가 되면 됩니다.



const routes = [
  {
    path: "/hello",
    component: HelloWorld,
    beforeEnter: ()=>{
      if (로그인했냐 == false) {
        return '/login'
      }
    }
  }
];
이런 식입니다.

/hello로 들어가기 전에 "로그인했냐라는 변수가 false면 /login 페이지로 보내기" 기능을 개발해놨습니다.

님이 서버와 로그인기능이 있는 실제 서비스라면

로그인한 사용자는 대부분 쿠키나 로컬스토리지에 로그인 정보가 저장되어있습니다.

그게 있는지 검사하거나 하면 되겠군요.

다만 자바스크립트 변수나 데이터들은 콘솔창 코드입력으로 언제나 위조가 가능하기 때문에

서버도 당연히 마이페이지 내용을 보내주기 전에 로그인 했는지 검증을 해봐야겠죠?







const routes = [
  {
    path: "/hello",
    component: HelloWorld,
    beforeEnter: (to, from)=>{
      return to.fullPath
    }
  }
];
파라미터는 두세개 작명이 가능한데

첫 파라미터는 목적지 페이지,

둘째 파라미터는 출발 페이지입니다.

그리고 그것들은 $route라는 변수랑 똑같이 이용가능합니다.

to.fullPath하면 전체 경로를 알려주고

to.params.id 하면 id 파라미터를 알려주고 그렇습니다.





참고로 return false는 라우팅 중단,

return이 없으면 그냥 원래의 route인 /hello로 잘 이동시켜줍니다.











3. 여러개의 route에 같은 navigation guard를 추가하고 싶으면



router라는 변수에다가 .beforeEach() 이런거 쓰시면 됩니다.

내부엔 함수가 들어가는데 사용법은 아까랑 똑같습니다.



const router = createRouter({ 어쩌구 })
router.beforeEach((to, from) => {
  //페이지 변경 전에 실행할 코드
})




라우팅 전에 뭔가 실행하고 싶으면 beforeEach() 혹은 beforeResolve()를 쓰면 되고

라우팅 하고나서 뭔가 실행하고 싶으면 afterEach() 쓰면 됩니다.









4. Vue 컴포넌트 안에서도 navigation guard 쓸 수 있음



vue 파일 안에서도 페이지 이동시 뭔가 코드를 실행가능합니다.

created() mounted() 이런거랑 비슷하게 활용가능합니다.



beforeRouteEnter(){}
beforeRouteUpdate(){}
라는 것들을 lifecycle hook쓰는 위치에다가 쓰면 됩니다.

파라미터는 두개 입력가능한데 각각 목적지인 to, 출발지인 from을 의미합니다.

특정 페이지로 접속했을 때 ajax 요청하고 그럴 일이 있으면 저기다가 쓰시면 됩니다.





더 자세한내용은 vue router 4버전 페이지를 참고합시다.

https://next.router.vuejs.org/


-------------------------------------------------------------------------------------

서버로 ajax 요청하는 법

1. axios 라이브러리를 설치한다 // fetch 문법을 사용하나 최신버전의 브라우저에서만 적용되어 호환성 문제때문에 axios를 주로 사용한다

npm install axios

일단 서버가 뭐냐면



서버는 그냥 요청하면 데이터주는 간단한 프로그램일 뿐입니다.

예를 들어 네이버 웹툰 서버는 뭐겠습니까. 웹툰 달라고 하면 주는 프로그램일 뿐입니다.



근데 서버에게 데이터를 요청하려면 GET 요청 / POST 요청 이라는 방법을 꼭 써야합니다.

GET은 데이터를 가져올 때 사용하며 서버가 요구하는 URL을 적어야합니다.

POST는 서버로 데이터를 보낼 때 사용하고 역시 서버가 요구하는 URL을 적어야합니다.



그래서 우리도 더보기 버튼을 누르면 서버로 추가 게시물을 요청할건데

제가 임시로 서버를 하나 만들어왔습니다.

위에 적은 URL로 GET 요청을 하면 추가 게시물을 보내줍니다.

그게 제가 만든 서버 전부임



ajax(에이잭스)란? 비동기 통신 기술의 통합 명칭 이다.

각 브라우저에 ajax 엔진이 있고, 이 엔진은 브라우저 단에서
사용자가 요청을 하면, 자바스크립트 함수가 ajax 엔진에 요청을 하는데,
딱 필요한 부분만 요청을 하여 응답받아 처리하므로, 불필요한 처리를 하지않아
빠르고 사용자 체감시 더 나은 성능을 경험하게 한다.

쉽게말하면 ajax를 이용하면 클라이언트 요청시 뷰페이지 상에서 빠르고, 필요한 처리만 해준다.









Ajax 요청을 하려면 axios를 씁시다



fetch라는 자바스크립트 기본함수를 써도 되는데 호환성 때문에

axios를 자주 쓰게 될 것입니다.

빨리 터미널 켜서 npm install axios를 입력합시다.

뭔가 안되면 yarn 있으면 yarn add axios를 입력합시다.

(미리보기 띄우던 터미널은 끄고 설치하시길 바랍니다)







import axios from 'axios';

axios.get('서버URL').then( 결과 => {
  GET요청 성공시 실행할 코드~~
  console.log(결과);
})
이렇게 쓰면 원하는 URL로 GET요청을 할 수 있습니다.

그리고 .then() 안에 function(){} 콜백함수를 추가해주면 되는데

그 안에는 GET요청 성공시 실행할 코드를 적으시면 됩니다.

GET요청으로 가져온 데이터는 저기 그 결과라는 파라미터에 담겨있습니다.









import axios from 'axios';

axios.get('서버URL').then( 결과 => {
  GET요청 성공시 실행할 코드~~
}).catch( ()=>{
  실패시 실행할 코드
})
ajax요청이 실패시 특정 코드를 실행하고 싶으면 .catch 안에 적으면 됩니다.

URL을 잘못 쓰거나 서버가 다운되거나 그러면 ajax 요청이 실패할 수 있습니다.







import axios from 'axios';

axios.post('서버URL', '보낼데이터').then( 결과 => {
  POST요청 성공시 실행할 코드~~
}).catch( ()=>{
  실패시 실행할 코드
})
POST 요청을 보낼 수도 있습니다.

POST 요청은 서버로 원하는 데이터를 전송할 수 있습니다. 문자, object 다 가능합니다.







아무튼 제가 만들어놓은 서버로 GET 요청을 하셔서 게시물을 하나 더 가져와보시길 바랍니다.

그리고 가져온 그걸로 <Post>를 하나 더 생성해주면 되겠습니다.

<Post>를 하나 더 생성 어떻게 하냐고요?

<Post>는 반복문 돌려놨던 기억이 납니다. 게시물이라는 데이터 갯수만큼 반복문 돌려서 생성하라고 해놨는데

그럼 여러분이 코드로 짜야할 것은 "<Post>라는 HTML 하나 추가해주세요~"가 아니라

"게시물 데이터를 하나 증가시켜주세요~" 입니다.

Vue는 항상 데이터중심적으로 개발합니다.


(오늘의 교훈) 다른 페이지가 필요하면 vue-router 써도 되지만

간단한 UI들은 탭으로 만드셔도 상관없습니다.


--------------------------------------------------------------------------------------------------------

Vuex 쓰는 이유



인터넷 보면 Vuex 써야된다고 하는데 이건 필수 라이브러리가 아닙니다.

1. 여러분들이 props와 custom event로 데이터 주고받는게 힘들면 씁니다.

왜냐면 Vuex를 설치하면 js 파일하나에다가 모든 데이터를 다 저장할 수 있습니다.

그럼 모든 컴포넌트들은 그 데이터를 직접 꺼내쓰고 수정할 수 있습니다.

이제 props 그딴거 필요없이 모든 컴포넌트가 데이터에 직접 접근가능합니다.



2. Vue파일과 데이터가 너무 많으면 씁니다.

왜냐면 Vuex 라는 라이브러리를 상태관리 (데이터관리) 라이브러리라고 하는데

예를 들어 name이라는 데이터를 컴포넌트 100만개에서 쓰고 있는데

갑자기 삑나면 어디서 삑났는지 name을 쓰는 곳 100개를 다 뒤져야하겠죠?

근데 Vuex를 쓰면 데이터를 한 곳에서 관리해주기 때문에, 데이터 수정하는 방법도 한 곳에서 관리하기 때문에 디버깅이 쉽습니다.

그래서 큰 프로젝트 만들 땐 필수입니다.

지금 만드는 프로젝트에선 배보다 배꼽이 더 클 수 있습니다.







어떻게 쓰는지는 일단 설치, 셋팅부터 하고 데이터 저장하는 법 부터 배워봅시다.

설치는 https://next.vuex.vuejs.org/ 들어가면 설치명령어를 구경가능합니다.

아니면 애초에 프로젝트 만들 때 vuex 선택해도 됩니다.











Vuex 셋팅



src안에 아무데나 store.js를 만들고 다음 코드를 작성해줍니다.

import { createStore } from 'vuex'

const store = createStore({
  state(){
    return {

    }
  },
})

export default store




그 다음에 store.js 파일을 main.js에 등록해주어야합니다.

등록안하면 큰일남



(main.js에 추가하셈)

import store from './store.js'
app.use(store).mount('#app')
물론 차이점만 잘 분석해서 붙여넣으시길 바랍니다.









그럼 이제 store.js에 저장한 데이터들을 모든 컴포넌트가 가져다쓸 수 있습니다.

데이터 저장은 store.js에 저장하시면 되고

출력하려면 vue파일에서 {{ $store.state.데이터명 }} 하시면 됩니다.

함수나 mounted 이런 곳에서 쓰려면 this.$store.state.어쩌구 하시면 됩니다.


--------------------------------------------------------------------------------

Vuex 쓰는 이유



인터넷 보면 Vuex 써야된다고 하는데 이건 필수 라이브러리가 아닙니다.

1. 여러분들이 props와 custom event로 데이터 주고받는게 힘들면 씁니다.

왜냐면 Vuex를 설치하면 js 파일하나에다가 모든 데이터를 다 저장할 수 있습니다.

그럼 모든 컴포넌트들은 그 데이터를 직접 꺼내쓰고 수정할 수 있습니다.

이제 props 그딴거 필요없이 모든 컴포넌트가 데이터에 직접 접근가능합니다.



2. Vue파일과 데이터가 너무 많으면 씁니다.

왜냐면 Vuex 라는 라이브러리를 상태관리 (데이터관리) 라이브러리라고 하는데

예를 들어 name이라는 데이터를 컴포넌트 100만개에서 쓰고 있는데

갑자기 삑나면 어디서 삑났는지 name을 쓰는 곳 100개를 다 뒤져야하겠죠?

근데 Vuex를 쓰면 데이터를 한 곳에서 관리해주기 때문에, 데이터 수정하는 방법도 한 곳에서 관리하기 때문에 디버깅이 쉽습니다.

그래서 큰 프로젝트 만들 땐 필수입니다.

지금 만드는 프로젝트에선 배보다 배꼽이 더 클 수 있습니다.







어떻게 쓰는지는 일단 설치, 셋팅부터 하고 데이터 저장하는 법 부터 배워봅시다.

설치는 https://next.vuex.vuejs.org/ 들어가면 설치명령어를 구경가능합니다.

아니면 애초에 프로젝트 만들 때 vuex 선택해도 됩니다.











Vuex 셋팅



src안에 아무데나 store.js를 만들고 다음 코드를 작성해줍니다.

import { createStore } from 'vuex'

const store = createStore({
  state(){
    return {

    }
  },
})

export default store




그 다음에 store.js 파일을 main.js에 등록해주어야합니다.

등록안하면 큰일남



(main.js에 추가하셈)

import store from './store.js'
app.use(store).mount('#app')
물론 차이점만 잘 분석해서 붙여넣으시길 바랍니다.









그럼 이제 store.js에 저장한 데이터들을 모든 컴포넌트가 가져다쓸 수 있습니다.

데이터 저장은 store.js에 저장하시면 되고

출력하려면 vue파일에서 {{ $store.state.데이터명 }} 하시면 됩니다.

함수나 mounted 이런 곳에서 쓰려면 this.$store.state.어쩌구 하시면 됩니다.

Vuex에 있는 state 데이터를 변경하려면



직접 vue파일에서 state를 수정하면 안된다고 했습니다.

해도 되긴 하는데 그럴거면 Vuex 쓸 이유가 없습니다.



name : 'kim' 이라는 state데이터가 하나 있고

100개의 Vue 파일에서 name : 'kim'을 수정한다고 칩시다.

근데 개발하다가 갑자기 'kim'이 아니라 123 이라는 숫자가 되어버리는 버그가 발생한겁니다.

그럼 대체 어떤 컴포넌트를 뒤져야합니까.

100개를 다 뒤져야합니다.

이 불상사를 방지하기 위해서 state 수정은 store.js만 할 수 있게 코드를 짜놓는게 좋습니다.

그러면 앞으로 state가 이상해지는 버그가 발생할 때 store.js만 뒤지면 버그를 잡을 수 있으니까요.



이런걸 멋진 개발용어로 'state 관리가 용이하다'라고 부릅니다. 그래서 Vuex를 상태(state)관리 라이브러리라고도 부릅니다.

그래서 state 변경하려면 코드 어떻게 짜야되냐면









mutations 라는 항목을 만들어서 거기에 데이터 수정방법을 정의합니다.



아시겠습니까 mutations라는 object 항목을 만든 다음에

거기다가 state 수정방법을 정의합니다. (함수로 만들어줍니다.)

그 다음에 이 함수를 부르는 방식으로 사용합니다.





예를 들어 .vue파일에서 어떤 버튼을 누르면 age라는 state를 1 더해주는 기능을 만들고 싶습니까.

그럼 age라는 state의 수정방법을 미리 만들어야합니다.



const store = createStore({
  state () {
    return {
      name : 'kim',
      age : 20,
    }
  },
  mutations :{
    한살더하기(state){
      state.age++
    }
  },
}




한살더하기()를 만들었습니다.

저렇게 파라미터 하나 추가하면 위에 있는 state를 뜻합니다. 그래서 그거 가지고 마음대로 지지고 볶으면 됩니다.









그 다음에 vue 파일에서는 뭔가 버튼을 누르면 age를 +1 해주고 싶습니까.

그러면 store.js에게 부탁만 하면 됩니다.

한살더하기()를 실행해달라고요.

근데 store.js에게 부탁할 땐 정중히 부탁해야합니다.



(App.vue)

<button @click="$store.commit('한살더하기')">버튼</button>
vue파일은 $store.commit(함수명) 이런 형식에 맞춰야 부탁을 할 수 있습니다.

안그러면 부탁안들어줌

아무튼 그러면 저거 버튼 누르면 store.js에게 한살더하기 실행해달라고 부탁합니다.

그럼 store.js는 한살더하기() 실행해줍니다. 그럼 age에 1이 더해집니다.

이게 Vuex에 있는 state 수정방법입니다.







Vuex 쓰면 state 수정하는 것도 매우 귀찮아집니다.

하지만 나중에 버그 찾는다고 Vue파일 100만개 뒤지는 것 보다는 낫지 않겠습니까.

Vuex에선 state를 수정할 때 mutations 함수를 만들어서 그걸 이용해서 수정하라고 배워봤는데

가끔 서버에서 데이터를 가져와서 수정하고 싶을 때가 있습니다.

그럴때 당연히 서버로 ajax 요청을 날리면 되는데

그런건 mutations에 직접 적지 않고 actions라는 항목에 적으셔야합니다.



왜냐면 mutations 함수들을 만들 때 내부에 ajax처럼 오래걸리는 코드를 적어놓는다면

나중에 길게 코드짤 때 힘들어져서 그렇습니다.



예를 들어서 차례로 name과 age 데이터를 수정하고 싶다고 가정해봅시다.

무조건 name을 수정하고 그 다음에 age를 수정하고 싶은 겁니다.

그러려면 그냥

name수정하는함수()
age수정하는함수()
이렇게 사용하면 끝입니다.







근데 님들이 name수정하는함수() 안에 3초 넘게 걸리는 ajax 요청을 담아놨다면

name수정하는함수()  //3초걸림
age수정하는함수()
이렇게 사용하면 age 수정이 먼저 될 수도 있습니다.

왜냐면 자바스크립트는 ajax처럼 오래걸리는 코드는 (정확히 말하면 비동기식 처리를 지원하는 코드는)

잠깐 제껴두고 다음줄 부터 실행하려는 경향이 있기 때문입니다.

그럼 나중에 의도치않은 버그가 생길 수 있고 코드가 길어질 수 있습니다.





그래서 state를 수정하는 mutations 함수는 ajax 그런거 넣지말고

순수하게 state 변경만 하는 함수로 만들어두시길 바랍니다.

ajax 그런건 actions에 맡겨줍시다.









actions 만드는 법



그낭 mutations처럼 actions 항목을 만드신 후에 함수형태로 만드시면 됩니다.

actions : {
  데이터가져오기(){
    axios.get('').then(()=>{
      성공시 실행할 코드
    })
  }
}
그럼 이제 App.vue 이런 곳에서 $store.dispatch('데이터가져오기') 라고 사용했을 때 진짜 데이터가져와줍니다.

그리고 당연히 actions 함수를 부탁할 땐 $store.dispatch라고 정중히 부탁하셔야합니다.





데이터가져온 직후에 그걸로 state도 변경하고 싶으면

actions : {
  데이터가져오기(context){
    axios.get('').then(()=>{
      context.commit('mutations함수명')
    })
  }
}
이렇게 사용합니다.

왜냐고요? state 변경할 땐 무조건 mutations 함수 만들어쓰셔야하니까요.

그리고 mutations함수를 사용할 땐 예외없이 commit() 이라고 쓰셔야하는데

그걸 쓰기 위해선 함수에 context라는 파라미터 (자유작명가능) 하나 추가해주면 쓸 수 있습니다.

그 파라미터는 $store 변수같은 거라고 생각해도 좋습니다.









뭔가 복잡하지만 익숙해지면 이게 코드 관리하기 좋구나라는 생각을 하게 될겁니다.

아닐 수도 있지만 결국 프로젝트 커지면 Vuex는 필수기 때문에

이에 능숙해지고 싶으면 Vuex를 이용해서 인스타그램이나 부동산사이트를 다시 만들어보는건 어떨까요.

아니면 개인 프로젝트 하나 해보라고 했었던 기억이 나는데 거기 적용해보든가요.




state를 vue파일에서 꺼내쓸 때 $store.state.name 이런 식으로 꺼내썼는데

이게 길고 귀찮으면 mapState라는 함수를 써보십시오.

그 전에 computed 라는 항목에 대해 알아야합니다.









잠깐 알아보는 computed



함수만들 때 methods : {} 안에 만들라고 했는데

실은 computed : {} 안에 만들 수도 있습니다.



computed : {
  now2(){
    return new Date()
  }
},
methods : {
  now(){
    return new Date()
  }
}
똑같은 기능의 함수를 2개 만들어봤는데 차이점은

methods 안에 만든 함수는 함수를 부를 때마다 안의 코드가 실행됨

computed 안에 만든 함수는 함수를 불러도 안의 코드가 실행안됨

이런 차이가 있습니다. computed는 그냥 컴포넌트로드시 한번 실행되고 그 값을 계속 저장해서 씁니다.

computed는 일종의 계산결과 저장공간이라고 보시면 됩니다.



- computed 함수는 return 안쓰면 안됩니다.

- computed 함수를 가져다가 쓸 때는 소괄호없이 함수명만 쓰면 됩니다.

참고로 알아두셈 다시 Vuex로 돌아갑시다.











computed 쓰면 state 꺼내는 코드 짧아짐



맨날 $store.state.name 이렇게 하면 코드가 얼마나 길고 더러워지겠습니까.

데이터가 좀만 복잡해도 $store.state.name.name2[0].name3 이런 식으로 써야합니다.

아이디러



그럴 땐 자주 꺼내쓰는 state를 computed에 넣어놓으면 나름 짧게 사용가능합니다.

methods 이런데 넣어도 되지만 그냥 computed가 적절한듯

computed : {
  name(){
    return this.$store.state.name
  }
}
(<script>태그 안에서 $store쓰려면 this.$store 입니다)

그러면 이제 위에가서 {{name}} 이렇게 쉽게 state를 꺼내쓸 수 있는 것입니다.

이제 HTML이 안디러움













mapState 쓰면 computed 코드 짧아짐



하지만 꺼낼 state가 100개 있으면 computed도 100개 만들어야하네요? 그것도 드러울듯

그렇다면 mapState라는걸 꺼내쓰시면 됩니다.

그러면 알아서 computed 에다가 state를 등록해줌



import {mapState} from 'vuex'

computed : {
  ...mapState(['state이름1', 'state이름2'])
}
이러면 끝입니다. 위에서 import 해와야 쓸 수 있습니다. 이제 정말 안더러움







import {mapState} from 'vuex'

computed : {
  ...mapState({ 작명 : 'state이름1'})
}
혹은 object 자료형을 넣으면 state가져올 때 이름변경도 가능합니다.







import {mapState, mapMutations} from 'vuex'

computed : {
  ...mapState(['state이름1', 'state이름2']),
  ...mapMutations([ '좋아요', 'setMore' ])
}
이러면 mutations 함수도 쉽게 가져다 쓸 수 있습니다.

이제 $store.commit('좋아요') 이게 아니라

좋아요() 이렇게 쓸 수 있는 것임
---------------------------------------------------------------------------------------------------------


REST의 가장 중요한 특성은

각 요청이 어떤 동작이나 정보를 위한 것인지를
그 요청의 모습 자체로 추론 가능하다는거에요.

...

RESTful하게 만든 API는 요청을 보내는 주소만으로도
대략 이게 뭘 하는 요청인지 파악이 가능해요.

...

자원을 구조와 함께 나타내는
이런 형태의 구분자를 URI라고 해요.

그런데 이런 조회작업 뿐 아니라, 정보를 새로 넣거나
수정하거나 삭제하는 작업도 필요하죠.
이들을 통들어서 C.R.U.D, CRUD라고 불러요.

서버에 REST API로 요청을 보낼 때는
HTTP란 규약에 따라 신호를 전송해요.

...

하지만 누구든 각 요청의 의도를 쉽게 파악할 수 있도록
RESTful하게 API를 만들기 위해서는
이들을 목적에 따라 구분해서 사용해야 해요.

API란?
🎮 API의 개념
어떤 기계를 만들면, 사용자가 그 기능들을
전부 활용할 수 있도록 제어장치를 마련해야 해요.

예를 들어 TV는, 사용자가 그걸 켜거나 끄고,
채널을 선택하고, 음량을 조절할 수 있게 해줘야 하죠.
그래서 리모컨이 있는거에요.

같은 이유로 자판기에는 버튼들이 있고
컴퓨터에는 키보드와 마우스가 있죠.

이런 것들을 ‘인터페이스’라고 불러요.
기계와 인간 간의 소통창구인거죠.

사용자가 명령을 넣는 것 뿐 아니라,
그 결과와 정보들을 받아오기 위한
 TV의 스크린, 컴퓨터의 모니터 또한
이 인터페이스에 속해요.
소프트웨어의 영역으로 들어가볼까요?
컴퓨터나 스마트폰을 켜보면
사용자들이 프로그램이나 사이트, 앱을
원하는대로 제어하고 정보를 볼 있도록

버튼, 스크롤바, 슬라이더, 브라우저 창 등
소프트웨어적인 장치들이 마련돼있죠.
UI란 말 많이 들어보셨을거에요.

소프트웨어와 인간의 소통을 위한
User Interface인거에요.
하지만 IT세계에는 우리 눈에
직접 보이지 않는 영역들이 더 많죠.
기계와 기계, 소프트웨어와 소프트웨어 사이에도
수많은 요청과 정보 교환이 이뤄지고 있어요.
이들 사이에도 소통할 수 있는 창구가 필요한거죠.

...

이처럼 소프트웨어가 다른 소프트웨어로부터
지정된 형식으로 요청, 명령을 받을 수 있는 수단을
Application Programming Interface
API라고 해요.


------------------------------------------------------------------------------------------

[Vue.js] no-trailing-spaces 에러났을 때

불필요한 공백을 삭제

VSCode에서 File > Preferences > Settings >  Trim Trailing Whitespace을 검색

Trim Trailing Whitespace 체크박스 체크하기

